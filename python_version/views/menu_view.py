#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
View do Menu - Sistema IGO
"""

class MenuView:
    """Classe respons√°vel pela interface de usu√°rio dos menus"""
    
    def __init__(self):
        pass
    
    def mostrar_cabecalho(self, titulo):
        """Exibe cabe√ßalho padronizado"""
        print("\n" + "=" * 60)
        print(f"                    {titulo}")
        print("=" * 60)
    
    def mostrar_rodape(self):
        """Exibe rodap√© padronizado"""
        print("=" * 60)
        print("Pressione ENTER para continuar...")
        input()
    
    def mostrar_erro(self, mensagem):
        """Exibe mensagem de erro padronizada"""
        print(f"\n‚ùå ERRO: {mensagem}")
    
    def mostrar_sucesso(self, mensagem):
        """Exibe mensagem de sucesso padronizada"""
        print(f"\n‚úÖ {mensagem}")
    
    def mostrar_aviso(self, mensagem):
        """Exibe mensagem de aviso padronizada"""
        print(f"\n‚ö†Ô∏è  {mensagem}")
    
    def mostrar_info(self, mensagem):
        """Exibe mensagem informativa padronizada"""
        print(f"\n‚ÑπÔ∏è  {mensagem}")
    
    def limpar_tela(self):
        """Limpa a tela do terminal"""
        import os
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def mostrar_progresso(self, mensagem, valor_atual, valor_total):
        """Exibe barra de progresso"""
        percentual = int((valor_atual / valor_total) * 100)
        barra = "‚ñà" * (percentual // 5) + "‚ñë" * (20 - (percentual // 5))
        print(f"\r{mensagem}: [{barra}] {percentual}%", end="", flush=True)
        
        if valor_atual == valor_total:
            print()  # Nova linha quando completar
    
    def confirmar_acao(self, mensagem):
        """Solicita confirma√ß√£o do usu√°rio"""
        resposta = input(f"{mensagem} (s/n): ").strip().lower()
        return resposta in ['s', 'sim', 'y', 'yes']
    
    def selecionar_opcao(self, opcoes, mensagem="Escolha uma op√ß√£o"):
        """Permite sele√ß√£o de op√ß√£o com valida√ß√£o"""
        while True:
            print(f"\n{mensagem}:")
            for i, opcao in enumerate(opcoes, 1):
                print(f"{i} - {opcao}")
            print("0 - Cancelar")
            
            try:
                escolha = int(input("\nOp√ß√£o: ").strip())
                if escolha == 0:
                    return None
                if 1 <= escolha <= len(opcoes):
                    return escolha - 1
                else:
                    self.mostrar_erro("Op√ß√£o inv√°lida!")
            except ValueError:
                self.mostrar_erro("Digite um n√∫mero v√°lido!")
    
    def mostrar_tabela(self, dados, colunas, titulo="TABELA"):
        """Exibe dados em formato de tabela"""
        if not dados:
            print(f"\nüì≠ Nenhum {titulo.lower()} encontrado!")
            return
        
        # Calcular larguras das colunas
        larguras = []
        for i, coluna in enumerate(colunas):
            largura = len(coluna)
            for dado in dados:
                if isinstance(dado, dict) and coluna in dado:
                    largura = max(largura, len(str(dado[coluna])))
            larguras.append(largura)
        
        # Cabe√ßalho
        linha_cabecalho = " | ".join(f"{coluna:<{larguras[i]}}" for i, coluna in enumerate(colunas))
        largura_total = len(linha_cabecalho)
        
        print(f"\n{titulo}")
        print("=" * largura_total)
        print(linha_cabecalho)
        print("-" * largura_total)
        
        # Dados
        for dado in dados:
            linha = " | ".join(f"{str(dado.get(coluna, '')):<{larguras[i]}}" for i, coluna in enumerate(colunas))
            print(linha)
        
        print("=" * largura_total)
        print(f"Total: {len(dados)} registro(s)")
    
    def mostrar_menu_principal(self, nivel_acesso):
        """Exibe menu principal baseado no n√≠vel de acesso"""
        self.mostrar_cabecalho("MENU PRINCIPAL - SISTEMA IGO")
        
        print(f"N√≠vel de Acesso: {nivel_acesso.upper()}")
        print(f"Data/Hora: {self.obter_data_hora_atual()}")
        
        if nivel_acesso == "administrador":
            self.mostrar_menu_admin()
        elif nivel_acesso == "gerente":
            self.mostrar_menu_gerente()
        elif nivel_acesso == "vendedor":
            self.mostrar_menu_vendedor()
        elif nivel_acesso == "cliente":
            self.mostrar_menu_cliente()
        else:
            self.mostrar_erro("N√≠vel de acesso inv√°lido!")
    
    def mostrar_menu_admin(self):
        """Exibe menu para administradores"""
        print("\n1 - Cadastros")
        print("2 - Controle de Estoque")
        print("3 - Pedidos")
        print("4 - Relat√≥rios")
        print("5 - Configura√ß√µes do Sistema")
        print("6 - Relat√≥rio Geral")
        print("0 - Sair")
    
    def mostrar_menu_gerente(self):
        """Exibe menu para gerentes"""
        print("\n1 - Cadastros")
        print("2 - Controle de Estoque")
        print("3 - Pedidos")
        print("4 - Relat√≥rios")
        print("5 - Relat√≥rio Geral")
        print("0 - Sair")
    
    def mostrar_menu_vendedor(self):
        """Exibe menu para vendedores"""
        print("\n1 - Visualizar Produtos")
        print("2 - Atualizar Estoque")
        print("3 - Criar Pedidos")
        print("4 - Visualizar Pedidos")
        print("0 - Sair")
    
    def mostrar_menu_cliente(self):
        """Exibe menu para clientes"""
        print("\n1 - Visualizar Produtos")
        print("2 - Criar Pedido")
        print("3 - Meus Pedidos")
        print("0 - Sair")
    
    def obter_data_hora_atual(self):
        """Retorna data e hora atual formatada"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S")
    
    def mostrar_ajuda(self):
        """Exibe tela de ajuda"""
        self.mostrar_cabecalho("AJUDA - SISTEMA IGO")
        
        print("üìñ COMO USAR O SISTEMA:")
        print("\n1. LOGIN:")
        print("   ‚Ä¢ Digite seu usu√°rio e senha")
        print("   ‚Ä¢ Use as credenciais fornecidas pelo administrador")
        
        print("\n2. NAVEGA√á√ÉO:")
        print("   ‚Ä¢ Digite o n√∫mero da op√ß√£o desejada")
        print("   ‚Ä¢ Use '0' para voltar ou sair")
        print("   ‚Ä¢ Pressione Ctrl+C para sair em emerg√™ncia")
        
        print("\n3. FUNCIONALIDADES:")
        print("   ‚Ä¢ Cadastros: Gerenciar produtos, fornecedores, clientes e funcion√°rios")
        print("   ‚Ä¢ Estoque: Controlar entrada/sa√≠da de produtos")
        print("   ‚Ä¢ Pedidos: Criar e gerenciar solicita√ß√µes")
        print("   ‚Ä¢ Relat√≥rios: Visualizar estat√≠sticas do sistema")
        
        print("\n4. DICAS:")
        print("   ‚Ä¢ Sempre confirme antes de excluir registros")
        print("   ‚Ä¢ Use a busca para encontrar itens rapidamente")
        print("   ‚Ä¢ Verifique o estoque antes de criar pedidos")
        
        self.mostrar_rodape()
    
    def mostrar_sobre(self):
        """Exibe informa√ß√µes sobre o sistema"""
        self.mostrar_cabecalho("SOBRE - SISTEMA IGO")
        
        print("üè¢ SISTEMA IGO - GEST√ÉO DE PRODUTOS")
        print("\nüìã DESCRI√á√ÉO:")
        print("   Sistema completo para gest√£o de produtos, incluindo")
        print("   roupas, alimentos, controle de estoque e pedidos.")
        
        print("\nüéØ FUNCIONALIDADES:")
        print("   ‚Ä¢ Gest√£o de produtos (roupas e alimentos)")
        print("   ‚Ä¢ Controle de estoque com alertas")
        print("   ‚Ä¢ Sistema de pedidos e aprova√ß√µes")
        print("   ‚Ä¢ Relat√≥rios detalhados")
        print("   ‚Ä¢ Controle de acesso por n√≠veis")
        
        print("\nüõ†Ô∏è  TECNOLOGIAS:")
        print("   ‚Ä¢ Python 3.x com arquitetura MVC")
        print("   ‚Ä¢ Persist√™ncia em arquivo JSON")
        print("   ‚Ä¢ Interface em terminal")
        
        print("\nüë®‚Äçüíª DESENVOLVIMENTO:")
        print("   ‚Ä¢ Disciplina: NP1 (Semestre 2)")
        print("   ‚Ä¢ Foco: Programa√ß√£o estruturada e OO")
        print("   ‚Ä¢ Arquitetura: Model-View-Controller")
        
        print("\nüìÖ VERS√ÉO: 1.0.0")
        print("üìÖ DATA: 2025")
        
        self.mostrar_rodape()
